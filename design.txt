# CustomFit Kotlin Client SDK Documentation

## Overview

The CustomFit Kotlin Client SDK is a modular client for integrating with the CustomFit.ai platform. It provides feature flag management, event tracking, user context handling, and configuration management capabilities with both online and offline support.

## Architecture

The SDK follows a modular architecture with clear separation of concerns:

### Core Components

1. **CFClient**: Main entry point and facade that coordinates all SDK functionality. It manages:
   - SDK initialization
   - Background state monitoring
   - Configuration changes
   - Event tracking
   - Feature flag evaluation

2. **User Management**: Handles user identity, properties, and contexts for personalization.

3. **Configuration Management**: Manages SDK settings, feature flags, and remote configuration.

4. **Event Tracking**: Collects and transmits user events and analytics data.

5. **Network Layer**: Handles communication with CustomFit backend services.

## Directory Structure

```
src/main/kotlin/customfit/ai/kotlinclient/
├── analytics/                     # Analytics and event tracking
│   ├── event/                     # Event tracking components
│   │   ├── EventData.kt           # Event data structure
│   │   ├── EventPropertiesBuilder.kt # Builder for event properties
│   │   ├── EventTracker.kt        # Event tracking implementation
│   │   ├── EventType.kt           # Event type definitions
│   │   └── RegisterEvent.kt       # Event registration
│   └── summary/                   # Analytics summaries
├── client/                        # Client implementation
│   ├── CFClient.kt                # Main client class
│   ├── listener/                  # Event listeners
│   │   ├── AllFlagsListener.kt    # Listener for all flag changes
│   │   └── FeatureFlagChangeListener.kt # Listener for specific flag changes
│   └── managers/                  # Component managers
│       ├── ConfigCache.kt         # Configuration caching
│       ├── ConfigManager.kt       # Configuration management interface
│       ├── ConfigManagerImpl.kt   # Configuration management implementation
│       ├── ConnectionManagerWrapper.kt # Network connection management
│       ├── EnvironmentManager.kt  # Environment attributes management
│       ├── ListenerManager.kt     # Event listener management
│       └── UserManager.kt         # User data management
├── config/                        # Configuration components
│   ├── change/                    # Configuration change tracking
│   │   └── CFConfigChangeManager.kt # Configuration change manager
│   └── core/                      # Core configuration
│       ├── CFConfig.kt            # SDK configuration model
│       └── MutableCFConfig.kt     # Mutable configuration wrapper
├── constants/                     # SDK constants
│   └── CFConstants.kt             # SDK-wide constants
├── core/                          # Core components
│   ├── error/                     # Error handling
│   │   ├── CFResult.kt            # Result wrapper
│   │   └── ErrorHandler.kt        # Error handling utilities
│   ├── model/                     # Data models
│   │   ├── ApplicationInfo.kt     # Application information model
│   │   ├── CFUser.kt              # User model
│   │   ├── DeviceContext.kt       # Device information model
│   │   ├── EvaluationContext.kt   # Context for feature evaluation
│   │   ├── PrivateAttributesRequest.kt # Private user attributes
│   │   └── SdkSettings.kt         # SDK settings model
│   └── util/                      # Utility functions
├── extensions/                    # Kotlin extensions
├── lifecycle/                     # App lifecycle management
│   └── CFLifecycleManager.kt      # Lifecycle management
├── logging/                       # Logging infrastructure
│   ├── LogManager.kt              # Logging management
│   ├── Test.kt                    # Test logging utilities
│   └── TimberInitializer.kt       # Timber logging setup
├── network/                       # Network components
│   ├── ConfigFetcher.kt           # Remote configuration fetching
│   ├── HttpClient.kt              # HTTP client implementation
│   ├── NetworkConfigApplier.kt    # Network configuration
│   └── connection/                # Connection management
│       ├── ConnectionInformation.kt # Connection information model
│       ├── ConnectionManager.kt   # Connection management
│       ├── ConnectionStatus.kt    # Connection status model
│       └── ConnectionStatusListener.kt # Connection status events
├── platform/                      # Platform-specific implementations
│   ├── ApplicationInfoDetector.kt # Application info detection
│   ├── BackgroundStateMonitor.kt  # Background state interface
│   ├── DefaultBackgroundStateMonitor.kt # Background state implementation
│   ├── EnvironmentAttributesCollector.kt # Environment data collection
│   └── PlatformInfo.kt            # Platform information utilities
├── serialization/                 # Serialization utilities
│   ├── CustomDateDeserializer.kt  # Date deserialization
│   ├── CustomDateSerializer.kt    # Date serialization 
│   └── MapSerializer.kt           # Map serialization
└── utils/                         # General utilities
    ├── BackgroundQueue.kt         # Background task queue
    ├── BatteryManager.kt          # Battery state management
    ├── CacheManager.kt            # Cache management
    ├── ConfigCache.kt             # Configuration caching
    ├── CoroutineUtils.kt          # Coroutine utilities
    └── QueueOperation.kt          # Queue operation model
```

## Key Files

- **CFClient.kt**: Main entry point for the SDK
- **CFConfig.kt**: Configuration options for the SDK
- **CFUser.kt**: User model for identity and properties
- **EventTracker.kt**: Implementation of event tracking
- **ConfigFetcher.kt**: Handles fetching remote configurations
- **HttpClient.kt**: Network communication layer
- **ConnectionManager.kt**: Network connectivity management
- **CacheManager.kt**: Local caching of configurations and events
- **CoroutineUtils.kt**: Utilities for handling asynchronous operations
- **CFLifecycleManager.kt**: Application lifecycle management

## Key Components in Detail

### CFConfig

Configuration for the SDK with options for:
- Event tracking settings (queue size, flush intervals)
- Network settings (timeouts, retry policy)
- Logging configuration
- Background operation settings
- Battery saving options
- Environment attributes collection

### CFUser

User model that includes:
- User identity (customer ID)
- Anonymous/identified status
- Custom properties
- Private and session fields
- Context data
- Device information
- Application information

### Event Tracking

Tracks user events and interactions:
- Queues events for efficient batching
- Handles offline storage
- Implements retry mechanisms
- Manages periodic flushing

### Network Layer

Handles all communication with the CustomFit backend:
- HTTP requests
- Retry strategies
- Offline mode support
- Connection state monitoring

### Background Processing

Manages background operations:
- Battery-efficient polling
- Background state detection
- Reduced activity when app is in background

### Feature Flag Management

Handles feature flag evaluation:
- Remote configuration
- User targeting
- Context-based evaluation
- Change listeners

## Usage Patterns

The SDK follows a builder pattern for configuration and initialization:

1. Create a configuration
2. Initialize a user
3. Create the client with configuration and user
4. Use the client for feature flags and event tracking

## Advanced Features

1. **Offline Support**: The SDK can operate offline and queue events for later transmission.

2. **Battery Optimization**: Reduces network activity when battery is low.

3. **Automatic Environment Attributes**: Can automatically collect device and application information.

4. **Background Polling Control**: Configurable background update behavior.

5. **Error Handling**: Comprehensive error handling with customizable retry strategies.

6. **Logging**: Configurable logging levels for debugging and monitoring.

7. **Connection State Monitoring**: Tracks network connectivity changes. 